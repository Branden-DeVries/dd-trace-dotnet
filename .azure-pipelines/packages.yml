trigger:
  branches:
    include:
      - refs/tags/*
pr: none

variables:
  - name: buildConfiguration
    value: release
  - template: templates/variables/build.yml

jobs:

#### NuGet packages and Windows msi installer

- job: nuget_and_windows_msi
  strategy:
    matrix:
      x64:
        buildPlatform: x64
        nugetPack: true
      x86:
        buildPlatform: x86
        nugetPack: false

  pool:
    vmImage: windows-2019

  steps:

  - task: gittools.gitversion.gitversion-task.GitVersion@4
    displayName: GitVersion
    inputs:
      preferBundledVersion: false

  - template: templates/steps/build-managed.yml

  - task: NuGetCommand@2
    displayName: nuget restore native
    inputs:
      restoreSolution: Datadog.Trace.Native.sln
      vstsFeed: $(packageFeed)
      verbosityRestore: Normal

  - task: DotNetCoreCLI@2
    displayName: dotnet pack
    condition: and(succeeded(), eq(variables['nugetPack'], 'true'))
    inputs:
      command: pack
      packagesToPack: src/Datadog.Trace/Datadog.Trace.csproj;src/Datadog.Trace.AspNet/Datadog.Trace.AspNet.csproj;src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj;src/Datadog.Trace.OpenTracing/Datadog.Trace.OpenTracing.csproj
      packDirectory: nuget-output
      configuration: $(buildConfiguration)

  - task: PublishPipelineArtifact@0
    displayName: publish nuget artifacts
    condition: and(succeeded(), eq(variables['nugetPack'], 'true'))
    inputs:
      artifactName: nuget-packages
      targetPath: nuget-output

  - task: MSBuild@1
    displayName: msbuild msi
    inputs:
      solution: Datadog.Trace.proj
      platform: $(buildPlatform)
      configuration: $(buildConfiguration)
      msbuildArguments: /t:msi /p:RunWixToolsOutOfProc=true
      maximumCpuCount: true

  - task: PublishPipelineArtifact@0
    displayName: publish msi artifact
    inputs:
      artifactName: windows-msi-$(buildPlatform)
      targetPath: deploy/Datadog.Trace.ClrProfiler.WindowsInstaller/bin/$(buildConfiguration)/$(buildPlatform)/en-us

#### Linux packages

- job: linux_packages

  pool:
    vmImage: ubuntu-16.04

  steps:
  - template: templates/steps/build-managed.yml

  - template: templates/steps/publish-clrprofiler-managed.yml
    parameters:
      framework: 'netstandard2.0'

  - task: DockerCompose@0
    displayName: docker-compose run Profiler
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run Profiler

  - task: DockerCompose@0
    displayName: docker-compose run package
    inputs:
      containerregistrytype: Container Registry
      dockerComposeCommand: run package

  - task: PublishPipelineArtifact@0
    displayName: publish artifacts
    inputs:
      artifactName: linux-packages
      targetPath: deploy/linux
